syntax = "proto3";

option go_package = "github.com/fabianrwx/goarchive-proto/golang/authentication";

import "google/protobuf/empty.proto";

message PingResponse {
    string message = 1;
}

// Authentication service definition
service AuthenticationService {
    rpc Ping(google.protobuf.Empty) returns (PingResponse);
    // Validate token
    rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse) {}

    // Login with credentials
    rpc Login(LoginRequest) returns (LoginResponse) {}

    // Logout
    rpc Logout(LogoutRequest) returns (LogoutResponse) {}

    // Refresh token
    rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse) {}

    // Create a new Group and map it to a Role
    rpc CreateGroup (CreateGroupRequest) returns (GroupWithRoleResponse);
  
    // Get Group details by ID
    rpc GetGroup (GetGroupRequest) returns (GroupWithRoleResponse);
  
    // Update an existing Group's role
    rpc UpdateGroupRole (UpdateGroupRoleRequest) returns (GroupWithRoleResponse);
  
    // List all Group-Role mappings
    rpc ListGroups (google.protobuf.Empty) returns (ListGroupsResponse);

}

// Validate Token Request
message ValidateTokenRequest {
  string token = 1;
  bool isRefreshToken = 2;
}

// Validate Token Response
message ValidateTokenResponse {
  bool valid = 1;
  string error = 2;
}

// Login Request
message LoginRequest {
  string username = 1;
  string password = 2;
  AuthType auth_type = 3;
}

// Login Response
message LoginResponse {
  string username = 1;
  string access_token = 2;
  string refresh_token = 3;
  string token_expiry = 4;
  string refresh_expiry = 5;
  repeated string roles = 6;
}

// Logout Request
message LogoutRequest {
  string token = 1;
}

// Logout Response
message LogoutResponse {
  bool success = 1;
}

// Auth Type
enum AuthType {
  IN_MEMORY = 0;
  LDAP = 1;
}

// User
message User {
  string username = 1;
  string password = 2;
  repeated string roles = 3;
}

// LDAP Config
message LDAPConfig {
  string url = 1;
  string base_dn = 2;
  string bind_dn = 3;
  string bind_password = 4;
}

// Refresh Token Request
message RefreshTokenRequest {
    string refresh_token = 1;
}
  
  // Refresh Token Response
message RefreshTokenResponse {
    string access_token = 1;
    string refresh_token = 2;
}

// Messages for Role and Group with basic fields
message Role {
  uint32 id = 1;
  string name = 2;
}

message Group {
  string id = 1; // UUID format
  string name = 2;
  uint32 role_id = 3; // Foreign key to Role ID
}

// Request to create a new Group-Role mapping
message CreateGroupRequest {
  string group_name = 1;
  uint32 role_id = 2;
}

// Request to update an existing Group's role
message UpdateGroupRoleRequest {
  string group_id = 1; // UUID of the Group
  uint32 new_role_id = 2;
}

// Request to get a Group by its ID
message GetGroupRequest {
  string group_id = 1;
}

// Response with Group and Role information
message GroupWithRoleResponse {
  Group group = 1;
  Role role = 2;
}

// List response with multiple Group-Role mappings
message ListGroupsResponse {
  repeated GroupWithRoleResponse groups = 1;
}